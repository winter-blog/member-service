pipeline {
    agent any

    environment {
        GIT_BRANCH = 'develop'
        GIT_REPOSITORY_URL = 'https://github.com/winter-blog/member-service.git'

        repository = 'alswn4516/winter-blog-member-service'
        apiRepository = 'alswn4516/winter-blog-member-service-api'
        DOCKERHUB_CREDENTIALS = credentials('docker_hub_user_credential')
        DOCKER_CONTAINER_NAME = 'winter-blog-member-service'

        INTERNAL_PORT = 9000
        PROFILE ='-e "SPRING_PROFILES_ACTIVE=prod"'
        REMOTE = 'ubuntu@3.39.159.26'
        SSH_CMD = 'ssh -i /var/lib/jenkins/.ssh/jenkins.pem'
        ENV_FILE = '--env-file=./env/member-service.env'
        NETWORK = '--net winter-blog-network'

        SCP_CMD = 'scp -i /var/lib/jenkins/.ssh/jenkins.pem'
        SOURCE_FILE = 'build/api-spec/member-api-spec.yaml'
        TARGET_DIRECTORY = ':docs'

        DISCORD_WEBHOOK_URL = credentials("discord_webhook")
    }

    stages {
        stage('checkout') {
          steps {
            git branch: "$GIT_BRANCH",
                url: "$GIT_REPOSITORY_URL",
                credentialsId: 'github_access_token_credential'
            }
        }

         stage('Gradle Build') {
           steps {
                 sh "chmod +x gradlew"
                 sh """
                    ./gradlew clean build bootJar -x test
                    """
             }
         }

        stage('Open Api 3') {
          steps {
                sh "chmod +x gradlew"
                sh """
                   ./gradlew openapi3
                   """
            }
        }

        stage("Dockerize") {
            steps {
                sh "docker build -t $repository ."
                sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                sh "docker push $repository"
                sh "docker rmi $repository"
            }
        }

        stage("Deploy to EC2") {
            steps {
                  sh "$SSH_CMD $REMOTE 'docker pull $repository'"
                  sh "$SSH_CMD $REMOTE 'docker stop $DOCKER_CONTAINER_NAME || true'"
                  sh "$SSH_CMD $REMOTE 'docker rm $DOCKER_CONTAINER_NAME || true'"
                  sh "$SSH_CMD $REMOTE 'docker run -d --name $DOCKER_CONTAINER_NAME $NETWORK $PROFILE -p $INTERNAL_PORT $ENV_FILE $repository'"
                  sh "$SSH_CMD $REMOTE 'docker images -qf dangling=true | xargs -I{} docker rmi {}'"
            }
         }

         stage('Deploy to EC2 api docs') {
           steps {
                 sh "pwd | xargs echo Current directory:"
                 sh "$SCP_CMD $SOURCE_FILE $REMOTE$TARGET_DIRECTORY"
           }
         }
    }

     post {
            success {
                discordSend title: "Member Service CI/CD 알림",
                            description: "member-service CI/CD 결과",
                            footer: "member-service 빌드 및 배포에 성공했습니다.",
                            link: env.BUILD_URL, result: currentBuild.currentResult,
                            webhookURL: env.DISCORD_WEBHOOK_URL
            }
            failure {
                discordSend title: "Member Service CI/CD 알림",
                            description: "member-service CI/CD 결과",
                            footer: "member-service 빛드 및 배포에 실패했습니다.",
                            link: env.BUILD_URL, result: currentBuild.currentResult,
                            webhookURL: env.DISCORD_WEBHOOK_URL
            }
     }
}